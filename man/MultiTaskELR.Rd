% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/MultiTaskELR.R
\name{MultiTaskELR}
\alias{MultiTaskELR}
\alias{MultiTaskELR.default}
\title{MultiTaskELR}
\usage{
MultiTaskELR(form, ...)

\method{MultiTaskELR}{default}(form, dat, resp.vars, task.type, para, ...)
}
\arguments{
\item{form}{A named list of formulas for each task.
The response variable of each formula corresponds to
one of the elements in the vector 'resp.vars' which
equally is the name of the corresponding list element i.e
names(form) = resp.vars.}

\item{dat}{a named list (names(dat) = resp.vars) of matrices
for each task all of the same dimension and type of predictors.
The response variables  are all  binary 0,1 numeric vector.}

\item{resp.vars}{a character vector of response variables for each task.}

\item{task.type}{a named character vector (names(task.type) = resp.vars)
of type of tasks (class/regression)}

\item{para}{A named parameter list with required  entries:
\itemize{
\item{p: }{Dimension of random feature space }
\item{gamma: }{Numeric regularization parameter }
\item{mu: }{Task similarity parameter }
\item{ken: }{Type of kernel function}
}}

\item{\dots}{Further arguments passed to or from other methods.}
}
\value{
An object of class \code{MultiTaskELR}; a list with items
\item{form}{list of formulas for each task}
\item{beta}{estimated parameters for all tasks}
\item{H.W}{Random weight matrix}
\item{resp.vars}{a character vector of response variables for each task}
\item{task.type}{a named character vector of type of tasks}
\item{para}{A named parameter list}
}
\description{
This function trains a regularization based multi-task learning algorithm
using extreme logistic regression \code{\link[ELR]{ELR}} for
classification tasks and extreme learning machine (ELM) for regression
tasks.


}
\details{
\code{MultiTaskELR} trains a multi-task learning mpodel using either
\code{\link[ELR]{ELR}} for classification tasks or extreme learning machine
 ELM for regression tasks.
The algorithm is based on the the classical regularization based MTL
algorithm. Currently, it is assumed that all
tasks have the same number of observations and type of predictors.
If only one task is specified, then this is equivalent to
\code{\link{ELR}} or ELM.
}
\examples{
\dontrun{
set.seed(12345)
dat <- SynData.MultiTaskELR()
task.type = dat$task.type
ix = sample(nrow(dat$dat[[1]]), floor(nrow(dat$dat[[1]])*0.75))

dd.trn <- lapply(dat$dat, function(y) y[ix, ])
dd.tst <- lapply(dat$dat, function(y) y[-ix, ])

resp.vars <- sapply(dd.trn, function(x) colnames(x)[1])
 rhs.vars <- names(dat$dat[[1]])[-1]
 names(dd.trn) = names(dd.tst) = resp.vars
 names(task.type) = resp.vars

 form <- lapply(resp.vars, function(x) as.formula(paste0(paste0(x, "~"),
              paste0(rhs.vars, collapse= "+"))))
 names(form) = resp.vars

 para <- list( ken = "sigmoid", p = 100, gamma = 10.01, mu = 0.05)

 mtl.mod <- MultiTaskELR(form, dd.trn, resp.vars, task.type, para)

 pred <- predict(mtl.mod, dd.tst, class.type = "class")

 lapply(resp.vars[task.type == "class"], function(x)
           table(true = dd.tst[[x]][, x], pred = pred$class.pred[,x]))

require(DMwR)

 lapply(resp.vars[task.type == "regression"], function(x)
          regr.eval(dd.tst[[x]][, x], pred$reg.pred[,x]))
}
}
\author{
Che Ngufor <Ngufor.Che@mayo.edu>
}
\references{
[1] Che Ngufor, Sudhindra Upadhyaya, Dennis Murphree, Nageswar R. Madde,
Daryl J. Kor, and Jyotishman Pathak. "A Heterogeneous Multi-task
Learning for Predicting RBC Transfusion and Perioperative Outcomes".
To appear in the  15th Conference on Artificial Intelligence in Medicine,
AIME 2015, Pavia, Italy, June 17-20, 2015. Proceedings.

[2] Theodoros Evgeniou, and Massimiliano Pontil. "Regularized multi--task
learning." Proceedings of the tenth ACM SIGKDD international conference on
Knowledge discovery and data mining. ACM, 2004.
}
\seealso{
\code{\link[ELR]{ELR}} for single task
learning
}

